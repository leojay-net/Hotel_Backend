openapi: 3.0.3
info:
  title: Hotel API
  version: 1.0.0
  description: Book your room with ease
paths:
  /api/token/:
    post:
      operationId: api_token_create
      description: |-
        Takes a set of user credentials and returns an access and refresh JSON web
        token pair to prove the authentication of those credentials.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenObtainPairRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenObtainPairRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenObtainPairRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenObtainPair'
          description: ''
  /api/token/refresh/:
    post:
      operationId: api_token_refresh_create
      description: |-
        Takes a refresh type JSON web token and returns an access type JSON web
        token if the refresh token is valid.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefreshRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRefreshRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenRefreshRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefresh'
          description: ''
  /v1/admin/add_admin/{id}:
    patch:
      operationId: v1_admin_add_admin_partial_update
      description: Gives user admin permission
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - v1
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          description: No response body
  /v1/admin/add_user/:
    post:
      operationId: v1_admin_add_user_create
      description: Create's a normal new user
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserRequest'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
  /v1/admin/admin_users/:
    get:
      operationId: v1_admin_admin_users_retrieve
      description: Returns all admin users in the database
      tags:
      - v1
      security:
      - jwtAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /v1/admin/login/:
    post:
      operationId: v1_admin_login_create
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/LoginRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/LoginRequest'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Login'
          description: ''
  /v1/admin/logout/:
    post:
      operationId: v1_admin_logout_create
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LogoutRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/LogoutRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/LogoutRequest'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Logout'
          description: ''
  /v1/admin/register/:
    post:
      operationId: v1_admin_register_create
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Register'
          description: ''
  /v1/admin/remove_admin/{id}:
    delete:
      operationId: v1_admin_remove_admin_destroy
      description: Remove user admin permission
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - v1
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '204':
          description: No response body
  /v1/web/room/add/:
    post:
      operationId: v1_web_room_add_create
      description: Creates a new Room
      tags:
      - v1
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/RoomRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/RoomRequest'
          '*/*':
            schema:
              $ref: '#/components/schemas/RoomRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/RoomRequest'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Room'
          description: ''
  /v1/web/room/all/:
    get:
      operationId: v1_web_room_all_list
      description: Lists all Rooms from the database
      tags:
      - v1
      security:
      - jwtAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Room'
          description: ''
  /v1/web/room/delete/{room_id}:
    delete:
      operationId: v1_web_room_delete_destroy
      description: Deletes the Room whose id has been passed through the request
      parameters:
      - in: path
        name: room_id
        schema:
          type: string
        description: A unique value identifying this room.
        required: true
      tags:
      - v1
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '204':
          description: No response body
  /v1/web/room/detailed/{room_id}/:
    get:
      operationId: v1_web_room_detailed_retrieve
      description: Detail the Room
      parameters:
      - in: path
        name: room_id
        schema:
          type: string
        description: A unique value identifying this room.
        required: true
      tags:
      - v1
      security:
      - jwtAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Room'
          description: ''
  /v1/web/room/log/:
    post:
      operationId: v1_web_room_log_create
      description: Creates a new Room
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LogRoomRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/LogRoomRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/LogRoomRequest'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogRoom'
          description: ''
  /v1/web/room/update/{room_id}:
    patch:
      operationId: v1_web_room_update_partial_update
      description: Creates a new Room
      parameters:
      - in: path
        name: room_id
        schema:
          type: string
        description: A unique value identifying this room.
        required: true
      tags:
      - v1
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedRoomRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedRoomRequest'
          '*/*':
            schema:
              $ref: '#/components/schemas/PatchedRoomRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedRoomRequest'
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Room'
          description: ''
components:
  schemas:
    LogRoom:
      type: object
      properties:
        id:
          type: string
          readOnly: true
        user:
          type: string
          nullable: true
          maxLength: 1000
        room_number:
          type: integer
        booked:
          type: boolean
          default: false
        booked_date:
          type: string
          format: date
        end_date:
          type: string
          format: date
      required:
      - booked_date
      - end_date
      - id
      - room_number
    LogRoomRequest:
      type: object
      properties:
        user:
          type: string
          nullable: true
          maxLength: 1000
        room_number:
          type: integer
        booked:
          type: boolean
          default: false
        booked_date:
          type: string
          format: date
        end_date:
          type: string
          format: date
      required:
      - booked_date
      - end_date
      - room_number
    Login:
      type: object
      properties:
        email:
          type: string
          maxLength: 255
          minLength: 3
        username:
          type: string
          readOnly: true
          maxLength: 64
        tokens:
          type: string
          readOnly: true
      required:
      - email
      - tokens
      - username
    LoginRequest:
      type: object
      properties:
        email:
          type: string
          minLength: 3
          maxLength: 255
        password:
          type: string
          writeOnly: true
          minLength: 6
          maxLength: 68
      required:
      - email
      - password
    Logout:
      type: object
      properties:
        refresh:
          type: string
      required:
      - refresh
    LogoutRequest:
      type: object
      properties:
        refresh:
          type: string
          minLength: 1
      required:
      - refresh
    PatchedRoomRequest:
      type: object
      properties:
        name:
          type: string
          nullable: true
          maxLength: 100
        description:
          type: string
          nullable: true
          maxLength: 1000
        price:
          type: integer
        room_number:
          type: integer
        uploaded_images:
          type: array
          items:
            type: string
            format: binary
          writeOnly: true
        url:
          type: string
          format: uri
          minLength: 1
          maxLength: 200
    Register:
      type: object
      properties:
        email:
          type: string
          format: email
          title: Email address
          maxLength: 254
        username:
          type: string
          maxLength: 64
        phone_no:
          type: string
          maxLength: 15
        sex:
          type: string
          maxLength: 30
      required:
      - email
      - phone_no
      - sex
      - username
    RegisterRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          minLength: 1
          title: Email address
          maxLength: 254
        username:
          type: string
          minLength: 1
          maxLength: 64
        password:
          type: string
          writeOnly: true
          minLength: 6
          maxLength: 68
        phone_no:
          type: string
          minLength: 1
          maxLength: 15
        sex:
          type: string
          minLength: 1
          maxLength: 30
      required:
      - email
      - password
      - phone_no
      - sex
      - username
    Room:
      type: object
      properties:
        room_id:
          type: string
          readOnly: true
        name:
          type: string
          nullable: true
          maxLength: 100
        description:
          type: string
          nullable: true
          maxLength: 1000
        price:
          type: integer
        user:
          type: string
          nullable: true
          readOnly: true
        room_number:
          type: integer
        occupied:
          type: boolean
          readOnly: true
        images:
          type: array
          items:
            $ref: '#/components/schemas/RoomImage'
          readOnly: true
        url:
          type: string
          format: uri
          maxLength: 200
        booked_date:
          type: string
          format: date
          readOnly: true
        end_date:
          type: string
          format: date
          readOnly: true
        available_date:
          type: string
          format: date
          readOnly: true
      required:
      - available_date
      - booked_date
      - end_date
      - images
      - occupied
      - price
      - room_id
      - room_number
      - url
      - user
    RoomImage:
      type: object
      properties:
        image:
          type: string
          format: uri
      required:
      - image
    RoomImageRequest:
      type: object
      properties:
        image:
          type: string
          format: binary
      required:
      - image
    RoomRequest:
      type: object
      properties:
        name:
          type: string
          nullable: true
          maxLength: 100
        description:
          type: string
          nullable: true
          maxLength: 1000
        price:
          type: integer
        room_number:
          type: integer
        uploaded_images:
          type: array
          items:
            type: string
            format: binary
          writeOnly: true
        url:
          type: string
          format: uri
          minLength: 1
          maxLength: 200
      required:
      - price
      - room_number
      - uploaded_images
      - url
    TokenObtainPair:
      type: object
      properties:
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          readOnly: true
      required:
      - access
      - refresh
    TokenObtainPairRequest:
      type: object
      properties:
        email:
          type: string
          writeOnly: true
          minLength: 1
        password:
          type: string
          writeOnly: true
          minLength: 1
      required:
      - email
      - password
    TokenRefresh:
      type: object
      properties:
        access:
          type: string
          readOnly: true
        refresh:
          type: string
      required:
      - access
      - refresh
    TokenRefreshRequest:
      type: object
      properties:
        refresh:
          type: string
          minLength: 1
      required:
      - refresh
    User:
      type: object
      properties:
        profile_pic:
          type: string
          format: uri
          nullable: true
        email:
          type: string
          format: email
          title: Email address
          maxLength: 254
        password:
          type: string
          maxLength: 128
      required:
      - email
      - password
    UserRequest:
      type: object
      properties:
        profile_pic:
          type: string
          format: binary
          nullable: true
        email:
          type: string
          format: email
          minLength: 1
          title: Email address
          maxLength: 254
        password:
          type: string
          minLength: 1
          maxLength: 128
      required:
      - email
      - password
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: sessionid
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
